os:
  - linux
language: python

python:
    - 2.7

virtualenv:
  system_site_packages: true

sudo: false

cache:
  apt: true
  directories:
  - $HOME/chianti

env:
    global:
        - COMPILER=gcc
        - PANDAS_VERSION=0.16
        - ASTROPY_USE_SYSTEM_PYTEST=1
        - SETUP_CMD='test'
        - MINICONDA_URL='http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh'
        - CHIANTI_DATA_URL='http://www.chiantidatabase.org/download/CHIANTI_8.0.2_data.tar.gz'


matrix:
    include:

        - python: 2.7
          env: SETUP_CMD='test'

        # Test with remote data
        - python: 2.7
          env: SETUP_CMD='test --remote-data'

        # Test with slow tests
        - python: 2.7
          env: SETUP_CMD='test --args="--runslow"'

        # Do a coverage test in Python 2.
        - python: 2.7
          env: SETUP_CMD='test --coverage'


before_install:

    # We do this to make sure we get the dependencies so pip works below
    - export PYTHONIOENCODING=UTF8
    - wget $MINICONDA_URL -O miniconda.sh
    - chmod +x miniconda.sh
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH=$HOME/miniconda/bin:$PATH
    # install the CHIANTI database
    #- wget $CHIANTI_DATA_URL -O $HOME/chianti/CHIANTI_8.0.2_data.tar.gz
    #- tar -zxvf $HOME/chianti/CHIANTI_8.0.2_data.tar.gz -C $HOME/chianti
    - export XUVTOP=$HOME/chianti
    - hash -r
    - conda update --yes conda

install:

    - conda env create -f carsus_ci/carsus_ci_env27.yml
    - source activate carsus-ci

script:
    - echo CC=$COMPILER python setup.py $SETUP_CMD
    - CC=$COMPILER python setup.py $SETUP_CMD

after_success:
    - if [[ $SETUP_CMD == 'test --coverage' ]]; then coveralls; fi

after_failure:
    - cat /home/travis/.pip/pip.log